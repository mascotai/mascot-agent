services:
  nginx:
    image: nginx:alpine
    container_name: mascot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mascot-agent
    networks:
      - mascot-network

  postgres:
    image: pgvector/pgvector:pg16
    container_name: mascot-postgres-local
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mascot_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mascot-network

  mascot-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mascot-agent
    restart: unless-stopped
    # Don't expose port 3000 externally - force all traffic through Nginx
    # ports:
    #   - "3000:3000"
    environment:
      - NODE_ENV=production
      - ELIZA_UI_ENABLE=true
      - POSTGRES_URL=postgresql://postgres:password@postgres:5432/mascot_dev
      # Enable debug logging
      # - DEBUG=*
    env_file:
      - .env
    volumes:
      # Mount logs directory for persistence
      - ./logs:/app/logs
      # Mount data directory for any local file storage
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/health || curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mascot-network

networks:
  mascot-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  logs:
    driver: local
  data:
    driver: local